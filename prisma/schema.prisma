generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pasien {
  id         String       @id @default(cuid())
  name       String       @db.VarChar(100)
  age        Int
  gender     String
  address    String       @db.VarChar(100)
  gejala     String       @db.VarChar(100)
  rekamMedis RekamMedis[]
}

model Dokter {
  id         String       @id @default(cuid())
  name       String       @db.VarChar(100)
  address    String       @db.VarChar(100)
  email      String       @unique @db.VarChar(100)
  createdAt  DateTime     @default(now())
  rekamMedis RekamMedis[]
}

model Obat {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  jumlah      Int?     @default(1)
  ukuran      Int
  harga       Float
  total_harga Float
  keterangan  String   @db.VarChar(100)
  createdAt   DateTime @default(now())
}

model ObatPasien {
  id         String      @id @default(cuid())
  obat       Json?
  RekamMedis RekamMedis?
}

model RekamMedis {
  id             String      @id @default(cuid())
  resep          String      @db.VarChar(100)
  keluhan        String      @db.VarChar(100)
  diagnosa       String      @db.VarChar(100)
  keterangan     String      @db.VarChar(100)
  pasienId       String?
  dokterId       String?
  createdAt      DateTime    @default(now())
  obat_pasien_id String?     @unique
  dokter         Dokter?     @relation(fields: [dokterId], references: [id])
  obat_pasien    ObatPasien? @relation(fields: [obat_pasien_id], references: [id])
  pasien         Pasien?     @relation(fields: [pasienId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("USER")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
